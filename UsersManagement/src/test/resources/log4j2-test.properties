# myself log configuration file
# three appenders
# first console
# second rolling file all level
# third also is rolling file but just log error level

property.consoleLevel = TRACE
property.rollingLevel = TRACE
property.rollingErrorLevel = ERROR

#Log4j framework inner log message level(get log message which produced by log4j framework itself)
#when log4j can not work correctly,change it to trace to get more details.
status = info
dest = err
name = PropertiesConfig

#root filter, trace(1)---->debug(2)---->info(3)---->warn(4)---->error(5) ,only print equal or larger numbers
filter.threshold.type = ThresholdFilter
filter.threshold.level = trace
filter.threshold.onMatch = ACCEPT
filter.threshold.onMismatch = DENY

#appenders
appender.console.type = Console
appender.console.name = STDOUT
appender.console.layout.type = PatternLayout
appender.console.layout.pattern = %d{yyyy-MM-dd HH:mm:ss,SSS} %5p ¡ª [%50t] %-80c(line:%5L) : %m%n
#filter in this appender(filter smaller log)
appender.console.filter.threshold.type = ThresholdFilter
appender.console.filter.threshold.level = ${consoleLevel}

#log all level message
appender.rolling.type = RollingFile
appender.rolling.append=true
appender.rolling.name = RollingFile
appender.rolling.fileName = ./target/log/today.log
appender.rolling.filePattern = ./target/log/rolling2/all-%d{yyyy-MM-dd-HH-mm-ss}-%i.log.gz
appender.rolling.layout.type = PatternLayout
appender.rolling.layout.pattern = %d %p %C{1.} [%t] %m%n
#TriggerPolicy sets in this appender(there is collection),to compress(zip) log file
appender.rolling.policies.type = Policies
#TimeBasedTriggeringPolicy set ,according to the time(use interval)
appender.rolling.policies.time.type = TimeBasedTriggeringPolicy
#the unit of the interval is according to the most specific data Pattern,like this file is second(filePattern)
appender.rolling.policies.time.interval = 6
appender.rolling.policies.time.modulate = true
#SizeBasedTriggeringPolicy set ,according to the file size
appender.rolling.policies.size.type = SizeBasedTriggeringPolicy
appender.rolling.policies.size.size=100MB
appender.rolling.strategy.type = DefaultRolloverStrategy
appender.rolling.strategy.max = 5
appender.rolling.filter.threshold.type = ThresholdFilter
appender.rolling.filter.threshold.level = ${rollingLevel}

#JUST LOG ERROR MESSAGE
appender.rollingError.type = RollingFile
appender.rollingError.append=true
appender.rollingError.name = RollingFileError
appender.rollingError.fileName = ./target/log/error.log
appender.rollingError.filePattern = ./target/log/rolling2/error-%d{yyyy-MM-dd-HH-mm-ss}-%i.log.gz
appender.rollingError.layout.type = PatternLayout
appender.rollingError.layout.pattern = %d %p %C{1.} [%t] %m%n
#TriggerPolicy sets in this appender(there is collection),to compress(zip) log file
appender.rollingError.policies.type = Policies
#TimeBasedTriggeringPolicy set ,according to the time(use interval)
appender.rollingError.policies.time.type = TimeBasedTriggeringPolicy
#the unit of the interval is according to the most specific data Pattern,like this file is second(filePattern)
appender.rollingError.policies.time.interval = 6
appender.rollingError.policies.time.modulate = true
#SizeBasedTriggeringPolicy set ,according to the file size
appender.rollingError.policies.size.type = SizeBasedTriggeringPolicy
appender.rollingError.policies.size.size=100MB
appender.rollingError.strategy.type = DefaultRolloverStrategy
appender.rollingError.strategy.max = 5
appender.rollingError.filter.threshold.type = ThresholdFilter
appender.rollingError.filter.threshold.level = ${rollingErrorLevel}
#appenders end

#logger.rolling.name = log.LogTest
#logger.rolling.level = all
#logger.rolling.additivity = false
#logger.rolling.appenderRef.stdout.ref = STDOUT
#logger.rolling.appenderRef.rolling.ref = RollingFile

rootLogger.level = All
rootLogger.appenderRef.stdout.ref = STDOUT
rootLogger.appenderRef.rolling.ref = RollingFile
rootLogger.appenderRef.rollingError.ref = RollingFileError